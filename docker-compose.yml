
services:
  file_server_1:
    build:
      context: file_server/
    ports:
      - "9001:1234"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  file_server_2:
    build:
      context: file_server/
    ports:
      - "9002:1234"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  file_server_3:
    build:
      context: file_server/
    ports:
      - "9003:1234"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  file_server_4:
    build:
      context: file_server/
    ports:
      - "9004:1234"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  file_server_5:
    build:
      context: file_server/
    ports:
      - "9005:1234"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
      replicas: 1
    volumes:
      - ./.fileserver/data:/tmp/

  redis:
    image: redis:7-alpine          # lightweight official image
    container_name: redis-server
    ports:
      - "6379:6379"                # host:container
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"

  go_middleware:
    build:
      context: go_middleware/
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.8"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s


  go_load_tester:
    container_name: load-tester
    build:
      context: go_load_test/
    environment:
      - FILE_SERVER_HOST=host.docker.internal   # Point this to your application middleware
      - FILE_SERVER_PORT=8080                   # Point this to your application middleware (port will change)
      - FILE_SERVER_PROTO=http                  # Point this to your application middleware
      - FILE_SERVER_PATH_PREFIX=api/fileserver
      - REQUESTS_PER_SECOND=100                 # Base requests/sec the load test will begin on.
      - SEED_GROWTH_AMOUNT=1                    # Every second, this many more requests will be scheduled
      - ENABLE_REQUEST_RAMP=true                # If true, every 1 minute, your seed growth rate doubles
      - ENABLE_FILE_RAMP=true                   # If true, every 15 seconds the max possible file size written increases by 50%
      - RANDOMLY_UPLOAD_LARGE_FILES=true        # If true, 1 out of every 100 files uploaded will be > 100MB in size
      - MAX_FILE_COUNT=1000                     # Recommend 2-5x total REQUESTS_PER_SECOND (consider seed in this calculation)
      - MAX_FILE_SIZE=1024                      # 1KB, but could be set to ANYTHING in live tests
      - TERM=xterm-256color
    volumes:
      - ./.fileserver/data:/tmp/                # Error logs are written to this data dir under load_test.log
    depends_on:
      go_middleware:
        condition: service_healthy
      file_server_1:
        condition: service_started
      file_server_2:
        condition: service_started
      file_server_3:
        condition: service_started
      file_server_4:
        condition: service_started
      file_server_5:
        condition: service_started
      redis:
        condition: service_started



